name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.19.0'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Run unit tests
      run: flutter test --coverage
      
    - name: Run integration tests
      run: flutter test integration_test/
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Check code formatting
      run: dart format --set-exit-if-changed .

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: github/codeql-action/init@v2
      with:
        languages: dart
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Run dependency vulnerability scan
      run: |
        flutter pub deps --style=tree
        # Add additional security scanning tools here

  # Build and Test Android
  android:
    name: Build Android
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build debug APK
      run: flutter build apk --debug
      
    - name: Build release APK
      run: flutter build apk --release
      
    - name: Build app bundle
      run: flutter build appbundle --release
      
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/
        
    - name: Upload App Bundle artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-bundle
        path: build/app/outputs/bundle/

  # Build and Test iOS
  ios:
    name: Build iOS
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build iOS debug
      run: flutter build ios --debug --no-codesign
      
    - name: Build iOS release
      run: flutter build ios --release --no-codesign
      
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: build/ios/

  # Build Web
  web:
    name: Build Web
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build web
      run: flutter build web --release
      
    - name: Upload web artifacts
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: build/web/

  # Build with Flavors
  flavors:
    name: Build Flavors
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor: [free, enterprise]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build ${{ matrix.flavor }} APK
      run: flutter build apk --flavor ${{ matrix.flavor }} --release
      
    - name: Upload ${{ matrix.flavor }} APK
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.flavor }}-apk
        path: build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk

  # Performance Testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run performance tests
      run: flutter drive --driver=test_driver/perf_driver.dart --target=integration_test/perf_test.dart

  # Deploy to Firebase App Distribution (Android)
  deploy-android:
    name: Deploy Android
    runs-on: ubuntu-latest
    needs: [test, android, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download Android artifacts
      uses: actions/download-artifact@v3
      with:
        name: android-apk
        
    - name: Upload to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        groups: testers
        file: build/app/outputs/flutter-apk/app-release.apk
        releaseNotes: |
          Automated build from ${{ github.sha }}
          Changes: ${{ github.event.head_commit.message }}

  # Deploy to TestFlight (iOS)
  deploy-ios:
    name: Deploy iOS
    runs-on: macos-latest
    needs: [test, ios, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Setup code signing
      uses: apple-actions/import-codesigning-certs@v1
      with:
        p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
        p12-password: ${{ secrets.IOS_P12_PASSWORD }}
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build iOS for distribution
      run: flutter build ios --release
      
    - name: Upload to App Store Connect
      uses: apple-actions/upload-testflight@v1
      with:
        app-path: build/ios/iphoneos/Runner.app
        api-key: ${{ secrets.APPSTORE_API_KEY }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}

  # Deploy Web
  deploy-web:
    name: Deploy Web
    runs-on: ubuntu-latest
    needs: [test, web, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download web artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build
        
    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        channelId: live
        projectId: ${{ secrets.FIREBASE_PROJECT_ID }}

  # Notifications
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-android, deploy-ios, deploy-web]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Create Release
      uses: actions/create-release@v1
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          Changes:
          - ${{ github.event.head_commit.message }}
          
          Build artifacts available in the Actions tab.
        draft: false
        prerelease: false 